#lang s-exp "../emulator/mpu-test-lang.rkt"

(load-mpu "mpus/6802.mpu")

(define mpu (current-mpu))
(define memory (make-bytes 32))
(current-address-decoder (lambda (addr) memory))

(define (reset)
  (bytes-fill! memory 0)
  (send mpu reset))

(test-case "Load immediate data"
  (reset)
  (run ldaa #x08)
  (run ldab #x10)
  (run lds #x04)
  (run ldx #xA0)
  (check-register-equal? a #x08)
  (check-register-equal? b #x10)
  (check-register-equal? sp #x04)
  (check-register-equal? ix #xA0))

(test-case "Load relative data"
  (reset)
  (bytes-copy! memory 0 (bytes #x02 #x03 #x05 #x08))
  (run ldaa (ref 0))
  (run ldab (ref 1))
  (run lds (ref 2))
  (run ldx (ref 3))
  (check-register-equal? a #x02)
  (check-register-equal? b #x03)
  (check-register-equal? sp #x05)
  (check-register-equal? ix #x08))

(test-case "Store data"
  (reset)
  (set-register! a #x0A)
  (set-register! b #x0B)
  (set-register! sp #x0C)
  (set-register! ix #x0D)
  (run staa 0)
  (run stab 1)
  (run sts 2)
  (run stx 3)
  (check-equal? (subbytes memory 0 4)
                (bytes #x0A #x0B #x0C #x0D)))

(test-case "Branch"
  (reset)
  (run bra 4)
  (check-register-equal? pc 4)

  (run sign #f)
  (run bmi -4)
  (check-register-equal? pc 4)
  (run bpl -4)
  (check-register-equal? pc 0)

  (run sign #t)
  (run bpl 4)
  (check-register-equal? pc 0)
  (run bmi 4)
  (check-register-equal? pc 4))

(test-case "Stack"
  (reset)
  (set-register! sp 31)
  (run ldaa 42)
  (run psha)
  (run ldab 20)
  (run pshb)
  (check-register-equal? sp 29)
  (check-equal? (subbytes memory 30)
                (bytes 20 42))
  (run pula)
  (run pulb)
  (check-register-equal? a 20)
  (check-register-equal? b 42)
  (check-register-equal? sp 31)
  (run des)
  (check-register-equal? sp 30)
  (run ins)
  (check-register-equal? sp 31))

(test-case "Simple addition"
  (reset)
  (run ldaa #x28)
  (run ldab #x14)
  (run aba)
  (check-register-equal? a #x3C)
  (check-status?))

(test-case "Addition rolls over"
  (reset)
  (set-register! a #x7A)
  (run adca #xFF) ;; equivalent to -1
  (check-register-equal? a #x79)
  (check-status? carry half))

(test-case "Addition with carry"
  (reset)
  (set-register! b #x14)
  (set-status! carry #t)
  (run adcb 1) ;; with carry should be +2
  (check-register-equal? b #x16)
  (check-status?))

(test-case "Additions without carry"
  (reset)
  (set-register! a #x14)
  (set-register! b #x24)
  (set-status! carry #t)
  (run adda 1) ;; should not be concerned with carry
  (check-register-equal? a #x15)
  (check-status?)

  (set-status! carry #t)
  (run addb 1) ;; should not be concerned with carry
  (check-register-equal? b #x25)
  (check-status?))

(test-case "Addition generates half-carry"
  (reset)
  (run ldab #x0F)
  (run addb 1)
  (check-register-equal? b #x10)
  (check-status? half))

(test-case "Addition of two positive numbers generates negative overflow"
  (reset)
  (run ldaa 127)
  (run adda 127)
  (check-register-equal? a 254)
  (check-status? sign overflow half))

(test-case "Addition of two negative numbers generates positive overflow"
  (reset)
  (run ldaa #x80)
  (run adda #xFF)
  (check-register-equal? a #x7F)
  (check-status? carry overflow))

(test-case "Simple substraction"
  (reset)
  (set-register! a 53)
  (set-register! b 11)
  (run sba)
  (check-register-equal? a 42)
  (check-status?))

(test-case "Substraction rolls under"
  (reset)
  (set-register! a 4)
  (run sbca 8)
  (check-register-equal? a 252)
  (check-status? carry sign))

(test-case "Substraction with carry"
  (reset)
  (set-register! b #x14)
  (set-status! carry #t)
  (run sbcb 1)
  (check-register-equal? b #x12)
  (check-status?))

(test-case "Substractions without carry"
  (reset)
  (set-register! a #x14)
  (set-register! b #x24)
  (set-status! carry #t)
  (run suba 1) ;; should not be concerned with carry
  (check-register-equal? a #x13)
  (check-status?)

  (set-status! carry #t)
  (run subb 1) ;; should not be concerned with carry
  (check-register-equal? b #x23)
  (check-status?))

(test-case "Substraction does not generate half-carry but borrow"
  (reset)
  (run ldab #x0F)
  (run subb #xFF) ;; equivalent to +1
  (check-register-equal? b #x10)
  (check-status? carry))

(test-case "Substraction never generates overflow"
  (reset)
  (run ldaa 127)
  (run suba #xFF)
  (check-register-equal? a 128)
  (check-status? sign carry))
