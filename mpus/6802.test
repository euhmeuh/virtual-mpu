#lang virtual-mpu/test

(load-mpu "mpus/6802.mpu")

(initialize
  (define memory (make-bytes 32))
  (current-address-decoder (lambda (addr) memory)))

(before-each
  (bytes-fill! memory 0)
  (send (current-mpu) reset))

(test-case "Load immediate data"
  (run ldaa #xF8)
  (check-register-equal? a #xF8)
  (check-status? negative)

  (run ldab #x10)
  (check-register-equal? b #x10)
  (check-status?)

  (run ldab #x00)
  (check-register-equal? b #x00)
  (check-status? zero)

  (run lds #x0004)
  (check-register-equal? sp #x0004)
  (check-status?)

  (run ldx #x00A0)
  (check-register-equal? ix #x00A0)
  (check-status?)

  (run ldx #xFFA0)
  (check-register-equal? ix #xFFA0)
  (check-status? negative))

(test-case "Load relative data"
  (bytes-copy! memory 0 (bytes #x02 #x03 #x05 #x08))
  (run ldaa (ref 0))
  (run ldab (ref 1))
  (run lds (ref 2))
  (run ldx (ref 3))
  (check-register-equal? a #x02)
  (check-register-equal? b #x03)
  (check-register-equal? sp #x05)
  (check-register-equal? ix #x08))

(test-case "Store data"
  (set-register! a #x0A)
  (set-register! b #x0B)
  (set-register! sp #x0C)
  (set-register! ix #x0D)
  (run staa 0)
  (run stab 1)
  (run sts 2)
  (run stx 3)
  (check-equal? (subbytes memory 0 4)
                (bytes #x0A #x0B #x0C #x0D)))

(test-case "Branch"
  (run bra 4)
  (check-register-equal? pc 4)

  (run negative #f)
  (run bmi -4)
  (check-register-equal? pc 4)
  (run bpl -4)
  (check-register-equal? pc 0)

  (run negative #t)
  (run bpl 4)
  (check-register-equal? pc 0)
  (run bmi 4)
  (check-register-equal? pc 4))

(test-case "Stack"
  (set-register! sp 31)
  (run ldaa 42)
  (run psha)
  (run ldab 20)
  (run pshb)
  (check-register-equal? sp 29)
  (check-equal? (subbytes memory 30)
                (bytes 20 42))
  (run pula)
  (run pulb)
  (check-register-equal? a 20)
  (check-register-equal? b 42)
  (check-register-equal? sp 31)
  (run des)
  (check-register-equal? sp 30)
  (run ins)
  (check-register-equal? sp 31))

(test-case "Simple addition"
  (run ldaa #x28)
  (run ldab #x14)
  (run aba)
  (check-register-equal? a #x3C)
  (check-status?))

(test-case "Addition rolls over"
  (set-register! a #x7A)
  (run adca #xFF) ;; equivalent to -1
  (check-register-equal? a #x79)
  (check-status? carry half))

(test-case "Addition with carry"
  (set-register! b #x14)
  (set-status! carry #t)
  (run adcb 1) ;; with carry should be +2
  (check-register-equal? b #x16)
  (check-status?))

(test-case "Additions without carry"
  (set-register! a #x14)
  (set-register! b #x24)
  (set-status! carry #t)
  (run adda 1) ;; should not be concerned with carry
  (check-register-equal? a #x15)
  (check-status?)

  (set-status! carry #t)
  (run addb 1) ;; should not be concerned with carry
  (check-register-equal? b #x25)
  (check-status?))

(test-case "Addition generates half-carry"
  (run ldab #x0F)
  (run addb 1)
  (check-register-equal? b #x10)
  (check-status? half))

(test-case "Addition of two positive numbers generates negative overflow"
  (run ldaa 127)
  (run adda 127)
  (check-register-equal? a 254)
  (check-status? negative overflow half))

(test-case "Addition of two negative numbers generates positive overflow"
  (run ldaa #x80)
  (run adda #xFF)
  (check-register-equal? a #x7F)
  (check-status? carry overflow))

(test-case "Addition of two negative numbers generates zero and overflow"
  (run ldaa #x80)
  (run adda #x80)
  (check-register-equal? a 0)
  (check-status? carry zero overflow))

(test-case "Simple substraction"
  (set-register! a 53)
  (set-register! b 11)
  (run sba)
  (check-register-equal? a 42)
  (check-status?))

(test-case "Substraction rolls under"
  (set-register! a 4)
  (run sbca 8)
  (check-register-equal? a 252)
  (check-status? carry negative))

(test-case "Substraction with carry"
  (set-register! b #x14)
  (set-status! carry #t)
  (run sbcb 1)
  (check-register-equal? b #x12)
  (check-status?))

(test-case "Substractions without carry"
  (set-register! a #x14)
  (set-register! b #x24)
  (set-status! carry #t)
  (run suba 1) ;; should not be concerned with carry
  (check-register-equal? a #x13)
  (check-status?)

  (set-status! carry #t)
  (run subb 1) ;; should not be concerned with carry
  (check-register-equal? b #x23)
  (check-status?))

(test-case "Substraction does not generate half-carry but borrow"
  (run ldab #x0F)
  (run subb #xFF) ;; equivalent to +1
  (check-register-equal? b #x10)
  (check-status? carry))

(test-case "Substraction of two negatives generates overflow"
  (run ldaa 255)
  (run suba 128)
  (check-register-equal? a 127)
  (check-status? overflow))

(test-case "Substraction of a negative by a positive generates overflow"
  (run ldaa 254)
  (run suba 127)
  (check-register-equal? a 127)
  (check-status? overflow))

(test-case "Substraction of a positive by a negative generates overflow"
  (run ldaa 127)
  (run suba 255)
  (check-register-equal? a 128)
  (check-status? carry negative overflow))

(test-case "AND"
  (run ldaa #b11110101)
  (run anda #b01011111)
  (check-register-equal? a #b01010101)
  (check-status?)

  (run ldab #b11110000)
  (run andb #b00001111)
  (check-register-equal? b 0)
  (check-status? zero))

(test-case "OR"
  (run ldaa #b11110101)
  (run oraa #b01011111)
  (check-register-equal? a #b11111111)
  (check-status? negative)

  (run ldab #b11110000)
  (run orab #b11110001)
  (check-register-equal? b #b11110001)
  (check-status? negative))

(test-case "XOR"
  (run ldaa #b11110101)
  (run eora #b01011111)
  (check-register-equal? a #b10101010)
  (check-status? negative)

  (run ldab #b11110000)
  (run eorb #b11110000)
  (check-register-equal? b 0)
  (check-status? zero))

(test-case "Status operations"
  (set-register! a #b00010000)
  (run bita #b00010000)
  (check-status?)

  (set-register! b #b11111101)
  (run bitb #b00000010)
  (check-status? zero)

  (set-register! a 12)
  (set-register! b 10)
  (run cba)
  (check-status?)

  (set-register! a 12)
  (run cmpa 13)
  (check-status? carry negative)

  (set-register! b 4)
  (run cmpb 4)
  (check-status? zero)

  (run tst #x7F)
  (check-status?)

  (set-register! a #x80)
  (run tsta)
  (check-status? negative)

  (set-register! b 0)
  (run tstb)
  (check-status? zero)

  (set-register! ix #xABCD)
  (run cpx #xFFFF)
  (check-status? negative)

  (set-register! ix #xABCD)
  (run cpx #xABCD)
  (check-status? zero))

(test-case "Arithmetic shift left")
(test-case "Arithmetic shift right")
(test-case "Logical shift right")
(test-case "Decrease")
(test-case "Increase")
(test-case "Rotate left")
(test-case "Rotate right")
(test-case "Complement (1's complement)")
(test-case "Negate (2's complement)")
(test-case "Decimal adjust A")
