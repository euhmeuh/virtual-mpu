#lang virtual-mpu/mpu
(mpu "6802"
  (registers (a b sr [ix 16] [sp 16] [pc 16]))
  (status sr (carry overflow zero negative interrupt half))
  (interrupts interrupt [irq #xFFF8] [soft #xFFFA] [nmi #xFFFC] [restart #xFFFE])
  (operations

    (aliases
      (branch (condition rel)
        (when condition ((+ pc rel) . -> . pc)))

      (push! (value)
        (value . ~> . sp)
        ((- sp 1) . -> . sp))

      (pull! ()
        ((+ sp 1) . -> . sp)
        (ref sp))

      (go-to-interrupt (int)
        ((high+low (ref int) (ref (+ 1 int))) . -> . pc))

      ;; setters for flags

      (carry! (x y [c 0])
        (carry (> (+ x y c) 255)))

      (borrow! (x y [c 0])
        (carry (< (- x y c) 0)))

      (half-carry! (x y [c 0])
        (half (> (+ (nib-low x) (nib-low y) c) 15)))

      (overflow! (x y [c 0])
        (overflow (xor (> (+ (bitwise-and x #b01111111)
                             (bitwise-and y #b01111111) c) 127)
                       (> (+ x y c) 255))))

      (zero! (result)
        (zero (= 0 result)))

      (negative! (result)
        (negative (not (= 0 (bitwise-and result #b10000000)))))

      ;; common flag changes

      (refresh! (result)
        (negative! result)
        (zero! result)
        (overflow #f)
        result)

      (addition! (x y [c 0])
        (with result (8bit+ x y c)
          (carry! x y c)
          (half-carry! x y c)
          (overflow! x y c)
          (zero! result)
          (negative! result)
          result))

      (substraction! (x y [c 0])
        (with result (8bit- x y c)
          (borrow! x y c)
          (overflow! x (8neg y) c)
          (zero! result)
          (negative! result)
          result))

      (negate! (x)
        (with result (8neg x)
          (carry (not (= 0 result)))
          (overflow (= result #b10000000))
          (zero! result)
          (negative! result)
          result)))

    ;; branches
    (bcc "Branch if carry clear" (rel) (branch (carry?) rel))
    (bcs "Branch if carry set" (rel) (branch (not (carry?)) rel))

    (bvc "Branch if overflow clear" (rel) (branch (overflow?) rel))
    (bvs "Branch if overflow set" (rel) (branch (not (overflow?)) rel))

    (beq "Branch if =0" (rel) (branch (zero?) rel))
    (bne "Branch if !=0" (rel) (branch (not (zero?)) rel))

    (bge "Branch if >=0" (rel) (branch (not (xor (negative?) (overflow?))) rel))
    (blt "Branch if <0" (rel) (branch (xor (negative?) (overflow?)) rel))

    (ble "Branch if <=0" (rel) (branch (or (zero?) (xor (negative?) (overflow?))) rel))
    (bgt "Branch if >0" (rel) (branch (not (or (zero?) (xor (negative?) (overflow?)))) rel))

    (bhi "Branch if higher" (rel) (branch (not (or (zero?) (carry?))) rel))
    (bls "Branch if lower or same" (rel) (branch (or (zero?) (carry?)) rel))

    (bmi "Branch if minus to ~a" (rel) (branch (negative?) rel))
    (bpl "Branch if plus to ~a" (rel) (branch (not (negative?)) rel))

    (bra "Branch always to ~a" (rel) (branch #t rel))
    (bsr "Branch always to subroutine ~a" (rel) (push! (low pc))
                                                (push! (high pc))
                                                (branch #t rel))

    ;; moves
    (ldaa "Load A <- ~a" (val) (val . -> . a) (refresh! val))
    (ldab "Load B <- ~a" (val) (val . -> . b) (refresh! val))
    (lds "Load SP <- ~a" (val) (val . -> . sp) (negative! (high val)) (zero! val) (overflow #f))
    (ldx "Load IX <- ~a" (val) (val . -> . ix) (negative! (high val)) (zero! val) (overflow #f))
    (staa "Store A -> ~a" (addr) (a . ~> . addr) (refresh! a))
    (stab "Store B -> ~a" (addr) (b . ~> . addr) (refresh! b))
    (sts "Store SP -> ~a" (addr) (sp . ~> . addr) (negative! (high sp)) (zero! sp) (overflow #f))
    (stx "Store IX -> ~a" (addr) (ix . ~> . addr) (negative! (high ix)) (zero! ix) (overflow #f))
    (tab "A -> B" () (a . -> . b) (refresh! a))
    (tba "B -> A" () (b . -> . a) (refresh! b))
    (tap "A -> SR" () (a . -> . sr))
    (tpa "SR -> A" () (sr . -> . a))
    (tsx "SP + 1 -> IX" () ((16bit+ sp 1) . -> . ix))
    (txs "IX - 1 -> SP" () ((16bit- ix 1) . -> . sp))

    ;; control
    (dex "IX - 1 -> IX" () (with result (16bit- ix 1) (result . -> . ix) (zero! result)))
    (inx "IX + 1 -> IX" () (with result (16bit+ ix 1) (result . -> . ix) (zero! result)))
    (jmp "Jump to ~a" (abs) (abs . -> . pc))
    (jsr "Jump to subroutine at ~a" (abs) (push! (low pc))
                                          (push! (high pc))
                                          (abs . -> . pc))
    (rts "Return from subroutine" () ((high+low (pull!) (pull!)) . -> . pc))
    (rti "Return from interrupt" () ((pull!) . -> . sr)
                                    ((pull!) . -> . b)
                                    ((pull!) . -> . a)
                                    ((high+low (pull!) (pull!)) . -> . ix)
                                    ((high+low (pull!) (pull!)) . -> . pc))
    (swi "Software interrupt" () (push! (low pc))
                                 (push! (high pc))
                                 (push! (low ix))
                                 (push! (high ix))
                                 (push! a)
                                 (push! b)
                                 (push! sr)
                                 (interrupt #t)
                                 (go-to-interrupt soft))

    ;; stack
    (des "SP - 1 -> SP" () ((- sp 1) . -> . sp))
    (ins "SP + 1 -> SP" () ((+ sp 1) . -> . sp))
    (psha "A -> [SP]" () (push! a))
    (pshb "B -> [SP]" () (push! b))
    (pula "[SP] -> A" () ((pull!) . -> . a))
    (pulb "[SP] -> B" () ((pull!) . -> . b))

    ;; maths
    (aba "A + B -> A" () ((addition! a b) . -> . a))
    (adca "A + ~a + carry -> A" (val) ((addition! a val (carry)) . -> . a))
    (adcb "B + ~a + carry -> B" (val) ((addition! b val (carry)) . -> . b))
    (adda "A + ~a -> A (no carry)" (val) ((addition! a val) . -> . a))
    (addb "B + ~a -> B (no carry)" (val) ((addition! b val) . -> . b))

    (sba "A - B -> A" () ((substraction! a b) . -> . a))
    (sbca "A - ~a - carry -> A" (val) ((substraction! a val (carry)) . -> . a))
    (sbcb "B - ~a - carry -> B" (val) ((substraction! b val (carry)) . -> . b))
    (suba "A - ~a -> A (no carry)" (val) ((substraction! a val) . -> . a))
    (subb "B - ~a -> B (no carry)" (val) ((substraction! b val) . -> . b))

    (anda "A AND ~a -> A" (val) ((refresh! (bitwise-and a val)) . -> . a))
    (andb "B AND ~a -> B" (val) ((refresh! (bitwise-and b val)) . -> . b))

    (oraa "A OR ~a -> A"  (val) ((refresh! (bitwise-ior a val)) . -> . a))
    (orab "B OR ~a -> B"  (val) ((refresh! (bitwise-ior b val)) . -> . b))

    (eora "A XOR ~a -> A" (val) ((refresh! (bitwise-xor a val)) . -> . a))
    (eorb "B XOR ~a -> B" (val) ((refresh! (bitwise-xor b val)) . -> . b))

    (asl "~a shifted left" (addr) ((shift-left (ref addr)) . ~> . addr))
    (asla "A shifted left" () ((shift-left a) . -> . a))
    (aslb "B shifted left" () ((shift-left b) . -> . b))

    (asr "~a shifted right" (addr) ((arithmetic-shift-right (ref addr)) . ~> . addr) (negative #f))
    (asra "A shifted right" () ((arithmetic-shift-right a) . -> . a) (negative #f))
    (asrb "B shifted right" () ((arithmetic-shift-right b) . -> . b) (negative #f))

    (lsr "~a logically shifted right" (addr) ((logical-shift-right (ref addr)) . ~> . addr))
    (lsra "A logically shifted right" () ((logical-shift-right a) . -> . a))
    (lsrb "B logically shifted right" () ((logical-shift-right b) . -> . b))

    (dec "~a - 1" (addr) ((refresh! (8bit- (ref addr) 1)) . ~> . addr)
                         (overflow (= (ref addr) #b01111111)))
    (deca "A - 1 -> A" () ((refresh! (8bit- a 1)) . -> . a)
                          (overflow (= a #b01111111)))
    (decb "B - 1 -> B" () ((refresh! (8bit- b 1)) . -> . b)
                          (overflow (= b #b01111111)))

    (inc "~a + 1" (addr) ((refresh! (8bit+ (ref addr) 1)) . ~> . addr)
                         (overflow (= (ref addr) #b10000000)))
    (inca "A + 1" () ((refresh! (8bit+ a 1)) . -> . a)
                     (overflow (= a #b10000000)))
    (incb "B + 1" () ((refresh! (8bit+ b 1)) . -> . b)
                     (overflow (= b #b10000000)))

    (rol "Rotate ~a left through carry" () (void))
    (rola "Rotate A left through carry" () (void))
    (rolb "Rotate B left through carry" () (void))

    (ror "Rotate ~a right through carry" () (void))
    (rora "Rotate A right through carry" () (void))
    (rorb "Rotate B right through carry" () (void))

    (com "Complement ~a" (addr) ((refresh! (bitwise-xor #xFF (ref addr))) . ~> . addr) (carry #t))
    (coma "Complement A" () ((refresh! (bitwise-xor #xFF a)) . -> . a) (carry #t))
    (comb "Complement B" () ((refresh! (bitwise-xor #xFF b)) . -> . b) (carry #t))

    (neg "Negate ~a" (addr) ((negate! (ref addr)) . ~> . addr))
    (nega "Negate A" () ((negate! a) . -> . a))
    (negb "Negate B" () ((negate! b) . -> . b))

    (daa "Decimal adjust A" () ((nib+nib
                                  (4bit+ (nib-high a)
                                         (if (>= (nib-high a) 10) 6 0))
                                  (4bit+ (nib-low a)
                                         (if (or (>= (nib-low a) 10) (half?)) 6 0))) . -> . a))

    ;; status
    (bita "A AND ~a -> SR" (val) (refresh! (bitwise-and a val)))
    (bitb "B AND ~a -> SR" (val) (refresh! (bitwise-and b val)))
    (cba "A - B -> SR" () (substraction! a b))
    (cmpa "A - ~a -> SR" (val) (substraction! a val))
    (cmpb "B - ~a -> SR" (val) (substraction! b val))
    (tst "~a - 0 -> SR" (val) (substraction! val 0) (carry #f) (overflow #f))
    (tsta "A - 0 -> SR" () (substraction! a 0) (carry #f) (overflow #f))
    (tstb "B - 0 -> SR" () (substraction! b 0) (carry #f) (overflow #f))
    (cpx "IX - ~a -> SR" (val) (with result (16bit- ix val)
                                 ;; NOTE: this operation does not set the carry flag
                                 ;;       so one cannot use unsigned branching
                                 (negative! (high result))
                                 (zero! result)
                                 (overflow! (high ix) (high (16neg val)))))

    ;; clear
    (clr "Clear ~a" (addr) (0 . ~> . addr) (carry #f) (zero #t) (negative #f) (overflow #f))
    (clra "Clear A" () (0 . -> . a) (carry #f) (zero #t) (negative #f) (overflow #f))
    (clrb "Clear B" () (0 . -> . b) (carry #f) (zero #t) (negative #f) (overflow #f))
    (clc "Clear carry" () (carry #f))
    (cli "Clear interrupt" () (interrupt #f))
    (clv "Clear overflow" () (overflow #f))

    ;; set
    (sec "Set carry" () (carry #t))
    (sei "Set interrupt" () (interrupt #t))
    (sev "Set overflow" () (overflow #t))

    ;; noop
    (nop "Do nothing" () (void))
    (wai "Wait for interrupt" () (push! (low pc))
                                 (push! (high pc))
                                 (push! (low ix))
                                 (push! (high ix))
                                 (push! a)
                                 (push! b)
                                 (push! sr)
                                 (wait-for-interrupt))
    ))
